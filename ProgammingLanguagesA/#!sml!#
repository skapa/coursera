Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- y;
stdIn:1.2 Error: unbound variable or constructor: y
- x + y;
stdIn:1.6 Error: unbound variable or constructor: y
stdIn:1.2 Error: unbound variable or constructor: x
- x = 3;
stdIn:1.2 Error: unbound variable or constructor: x
- 1 + 3;
val it = 4 : int
- x;
stdIn:2.1 Error: unbound variable or constructor: x
- it;
val it = 4 : int
- use test.xml
= ;
stdIn:3.5-3.13 Error: unbound structure: test in path test.xml
- use test.sml;
stdIn:3.1-3.9 Error: unbound structure: test in path test.sml
- ll
= ;
stdIn:1.2-1.4 Error: unbound variable or constructor: ll
- 
- use "test.sml";
[opening test.sml]
val x = 2 : int
val y = 5 : int
val it = () : unit
- x;
val it = 2 : int
- use "hw0provided.sml";
[opening hw0provided.sml]
val f = fn : int * int -> int
val double = fn : int -> int
val triple = fn : int -> int
val it = () : unit
- double(3);
val it = 5 : int


Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- double(1)
= ;
stdIn:1.2-1.8 Error: unbound variable or constructor: double
- use "hw0provided.sml";
[opening hw0provided.sml]
val f = fn : int * int -> int
val double = fn : int -> int
val triple = fn : int -> int
val it = () : unit
- double(4);
val it = 8 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw0test.sml";
[opening hw0test.sml]
hw0test.sml:7.13-7.19 Error: unbound variable or constructor: double
hw0test.sml:9.13-9.19 Error: unbound variable or constructor: double
hw0test.sml:11.13-11.19 Error: unbound variable or constructor: triple
hw0test.sml:13.13-13.19 Error: unbound variable or constructor: triple
hw0test.sml:15.13 Error: unbound variable or constructor: f
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw0test.sml";
[opening hw0test.sml]
[opening hw0provided.sml]
val f = fn : int * int -> int
val double = fn : int -> int
val triple = fn : int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
va it = () : unit
- 
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw0test.sml";
[opening hw0test.sml]
[opening hw0provided.sml]
val f = fn : int * int -> int
val double = fn : int -> int
val triple = fn : int -> int
val it = () : unit
val test1 = true : bool
val test11 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
al test6 = true : bool
val it = () : unit
- 
use "hw0solution.sml";
[opening hw0solution.sml]
val f = fn : int * int -> int
val double = fn : int -> int
val triple = fn : int -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw0test.sml";
[opening hw0test.sml]
[opening hw0solution.sml]
val f = fn : int * int -> int
val double = fn : int -> int
val triple = fn : int -> int
val it = () : unit
val test1 = true : bool
val test11 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val it = () : unit
- p1 = (3, 4);
stdIn:2.1-2.3 Error: unbound variable or constructor: p1
- (3,4)
= ;
val it = (3,4) : int * int
- val p1 = (3, 4);
val p1 = (3,4) : int * int
- p1;
val it = (3,4) : int * int
- #1 p1;
val it = 3 : int
- #1 p2;
stdIn:7.4-7.6 Error: unbound variable or c
- 
- #1 p1 + #2 p1;
val it = 7 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "test.sml"
= ;
[opening test.sml]
val x = 2 : int
val y = 5 : int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "new_test.sml";
[opening new_test.sml]
new_test.sml:9.10 Error: syntax error: inserting  EQUALOP
new_test.sml:16.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

- 
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[use failed: Io: openIn failed on "hw1tests.sml", Win32TextPrimIO:openRd: failed]
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
hw1tests.sml:3.1 Error: syntax error: inserting  LET
hw1tests.sml:10.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
- is_older((1,1,1),(1,1,1));
val it = false : bool
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
hw1tests.sml:3.1-3.4 Error: syntax error: replacing  VAL with  EQUALOP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
hw1tests.sml:3.1-3.4 Error: syntax error: replacing  VAL with  EQP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = false : bool
val it = () : unit
- is_older((1,1,1),(2,1,1));
val it = false : bool
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = <hidden-value> : bool
val test6 = true : bool
val test5 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = <hidden-value> : bool
val test6 = true : bool
val test5 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = <hidden-value> : bool
val test6 = true : bool
val test5 = <hidden-value> : bool
val test5 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
hw1.sml:6.24-6.27 Error: syntax error: replacing  AND with  ANDALSO
hw1.sml:7.24-7.27 Error: syntax error: replacing  AND with  RPAREN
hw1.sml:7.48-7.51 Error: syntax error: replacing  AND with  ANDALSO

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
hw1.sml:6.24-6.27 Error: syntax error: replacing  AND with  ANDALSO
hw1.sml:7.24-7.27 Error: syntax error: replacing  AND with  RPAREN
hw1.sml:7.48-7.51 Error: syntax error: replacing  AND with  LPAREN

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
hw1.sml:6.24-6.27 Error: syntax error: replacing  AND with  ANDALSO
hw1.sml:7.24-7.27 Error: syntax error: replacing  AND with  RPAREN
hw1.sml:7.48-7.51 Error: syntax error: replacing  AND with  LPAREN

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
hw1.sml:6.24-6.27 Error: syntax error: replacing  AND with  ANDALSO

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
hw1.sml:11.3-1.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         {1:'Y; 'Z} -> 'Y
  in expression:
    not (fn {1=1,...} => 1)
hw1.sml:13.3-13.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         {2:'Y; 'Z} -> 'Y
  in expression:
    not (fn {2=2,...} => 2)
hw1.sml:15.3-15.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: bool
  operand:         {3:'Y; 'Z} -> 'Y
  in expression:
    not (fn {3=3,...} => 3)
val it = () : unit
hw1tests.sml:3.13-3.21 Error: unbound variable or constructor: is_older
hw1tests.sml:4.13-4.21 Error: unbound variable or constructor: is_older
hw1tests.sml:5.13-5.21 Error: unbound variable or constructor: is_older
hw1tests.sml:6.13-6.21 Error: unbound variable or constructor: is_older
hw1tests.sml:7.13-7.21 Error: unbound variable or constructor: is_older
hw1tests.sml:8.13-8.21 Error: unbound variable or constructor: is_older
hw1tests.sml:9.13-9.21 Error: unbound variable or constructor: is_older
hw1tests.sml:10.13-10.21 Error: unbound variable or constructor: is_older
hw1tests.sml:11.13-11.21 Error: unbound variable or constructor: is_older
hw1tests.sml:12.14-12.22 Error: unbound variable or constructor: is_older
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older_old = fn : (int * int * int) * (int * int * int) -> bool
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = false : bool
val test5 = true : bool
val test6 = false : bool
val test7 = false : bool
val test8 = false : bool
val test9 = false : bool
val test10 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older_old = fn : (int * int * int) * (int * int * int) -> bool
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = false : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
	       - (*  *)
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
hw1.sml:10.49-10.58 Error: non-constructor applied to argument in pattern: month
hw1.sml:15.29-15.34 Error: unbound variable or constructor: month
hw1.sml:19.4-19.65 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * 'Z
  operand:         (int * int * int) list
  in expression:
    number_in_month (tl dates)
val it = () : unit
hw1tests.sml:3.17-3.25 Error: unbound variable or constructor: is_older
hw1tests.sml:4.17-4.25 Error: unbound variable or constructor: is_older
hw1tests.sml:5.17-5.25 Error: unbound variable or constructor: is_older
hw1tests.sml:6.17-6.25 Error: unbound variable or constructor: is_older
hw1tests.sml:7.17-7.25 Error: unbound variable or constructor: is_older
hw1tests.sml:8.17-8.25 Error: unbound variable or constructor: is_older
hw1tests.sml:9.17-9.25 Error: unbound variable or constructor: is_older
hw1tests.sml:10.17-10.25 Error: unbound variable or constructor: is_older
hw1tests.sml:11.17-11.25 Error: unbound variable or constructor: is_older
hw1tests.sml:12.18-12.26 Error: unbound variable or constructor: is_older
hw1tests.sml:14.17-14.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:15.17-15.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:16.17-16.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:17.17-17.32 Error: unbound variable or constructor: number_in_month
val it = () : unit
- use "hw1.sml"
= ;
[opening hw1.sml]
hw1.sml:10.49-10.58 Error: non-constructor applied to argument in pattern: month
hw1.sml:15.29-15.34 Error: unbound variable or constructor: month
hw1.sml:19.4-19.65 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * 'Z
  operand:         (int * int * int) list
  in expression:
    number_in_month (tl dates)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:19.4-19.65 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list
  in expression:
    number_in_month (tl dates)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val it = () : unit
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val it = () : unit
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
hw1.sml:27.7-27.78 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * (int * int * int)
  in expression:
    number_in_month (dates,hd months)
val it = () : unit
hw1tests.sml:3.17-3.25 Error: unbound variable or constructor: is_older
hw1tests.sml:4.17-4.25 Error: unbound variable or constructor: is_older
hw1tests.sml:5.17-5.25 Error: unbound variable or constructor: is_older
hw1tests.sml:6.17-6.25 Error: unbound variable or constructor: is_older
hw1tests.sml:7.17-7.25 Error: unbound variable or constructor: is_older
hw1tests.sml:8.17-8.25 Error: unbound variable or constructor: is_older
hw1tests.sml:9.17-9.25 Error: unbound variable or constructor: is_older
hw1tests.sml:10.17-10.25 Error: unbound variable or constructor: is_older
hw1tests.sml:11.17-11.25 Error: unbound variable or constructor: is_older
hw1tests.sml:12.18-12.26 Error: unbound variable or constructor: is_older
hw1tests.sml:14.17-14.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:15.17-15.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:16.17-16.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:17.17-17.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:18.17-18.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:20.17-20.34 Error: unbound variable or constructor: number_in_months1
hw1tests.sml:21.17-21.34 Error: unbound variable or constructor: number_in_months1
hw1tests.sml:22.17-22.34 Error: unbound variable or constructor: number_in_months1
hw1tests.sml:23.17-23.34 Error: unbound variable or constructor: number_in_months1
hw1tests.sml:24.17-24.34 Error: unbound variable or constructor: number_in_months1
hw1tests.sml:25.17-25.34 Error: unbound variable or constructor: number_in_months1
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:27.7-27.78 Error: operator and operand don't agree [tycon msmatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * (int * int * int)
  in expression:
    number_in_month (dates,hd months)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months1 = fn : (int * int * int) list * int list -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months1 = fn : (int * int * int) list * int list -> int
val it = () : unit
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val it = () : unit
hw1tests.sml:20.5-20.82 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * 'Z list
  in expression:
    number_in_month ((1,1,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,nil)
hw1tests.sml:21.5-21.83 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    number_in_month
      ((1,1,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,1 :: nil)
hw1tests.sml:22.5-22.83 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    number_in_month
      ((1,1,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,2 :: nil)
hw1tests.sml:23.5-23.85 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    number_in_month
      ((1,1,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,1 :: 2 :: nil)
hw1tests.sml:24.5-24.87 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    number_in_month
      ((1,1,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,
       1 :: 2 :: <exp> :: <exp>)
hw1tests.sml:25.5-25.89 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    number_in_month
      ((1,1,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,
       6 :: 5 :: <exp> :: <exp>)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val it = () : unit
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
hw1.sml:35.6-37.13 Error: types of if branches do not agree [tycon mismatch]
  then branch: int * int * int
  else branch: 'Z list
  in expression:
    if (fn <pat> => <exp>) tested_date = month then tested_date else nil
val it = () : unit
hw1tests.sml:3.17-3.25 Error: unbound variable or constructor: is_older
hw1tests.sml:4.17-4.25 Error: unbound variable or constructor: is_older
hw1tests.sml:5.17-5.25 Error: unbound variable or constructor: is_older
hw1tests.sml:6.17-6.25 Error: unbound variable or constructor: is_older
hw1tests.sml:7.17-7.25 Error: unbound variable or constructor: is_older
hw1tests.sml:8.17-8.25 Error: unbound variable or constructor: is_older
hw1tests.sml:9.17-9.25 Error: unbound variable or constructor: is_older
hw1tests.sml:10.17-10.25 Error: unbound variable or constructor: is_older
hw1tests.sml:11.17-11.25 Error: unbound variable or constructor: is_older
hw1tests.sml:12.18-12.26 Error: unbound variable or constructor: is_older
hw1tests.sml:14.17-14.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:15.17-15.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:16.17-16.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:17.17-17.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:18.17-18.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:20.17-20.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:21.17-21.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:22.17-22.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:23.17-23.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:24.17-24.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:25.17-25.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:27.17-27.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:28.17-28.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:29.17-29.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:30.17-30.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:31.17-31.31 Error: unbound variable or constructor: dates_in_month
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:35.6-37.13 Error: types of if branches do not agree [tycon mismatch]
  then branch: int * int * int
  else branch: 'Z list
  in expression:
    if (fn <pat> => <exp>) tested_date = month then tested_date else nil
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list list
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list list
val it = () : unit
hw1tests.sml:28.5-28.57 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list list * (int * int * int) list list
  operand:         (int * int * int) list list * 
                   ([int ty] * [int ty] * [int ty]) list
  in expression:
    dates_in_month ((<exp>,<exp>,<exp>) :: nil,1) = (1,1,1) :: nil
hw1tests.sml:30.5-30.81 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list list * (int * int * int) list list
  operand:         (int * int * int) list list * 
                   ([int ty] * [int ty] * [int ty]) list
  in expression:
    dates_in_month ((<exp>,<exp>,<exp>) :: <exp> :: <exp>,1) =
      (1,1,1) :: (2,1,2) :: nil
val it = () : unit
- dates_in_month([],1);
val it = [] : (int * int * int) list list
- dates_in_month([(1,1,1),(1,2,1)],1);
val it = [[(1,1,1)],[]] : (int * int * int) list list
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val it = () : unit
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val it = () : unit
hw1tests.sml:33.5-33.49 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    dates_in_month (nil,1 :: 2 :: <exp> :: <exp>)
hw1tests.sml:34.5-34.63 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    dates_in_month ((1,1,1) :: nil,1 :: 2 :: <exp> :: <exp>)
hw1tests.sml:35.5-35.52 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    dates_in_month ((1,1,1) :: nil,2 :: nil)
hw1tests.sml:36.5-36.83 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    dates_in_month ((1,1,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,1 :: nil)
hw1tests.sml:37.5-37.72 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    dates_in_month
      ((1,2,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,
       1 :: 3 :: <exp> :: <exp>)
hw1tests.sml:38.5-38.119 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (int * int * int) list * int
  operand:         (int * int * int) list * [int ty] list
  in expression:
    dates_in_month
      ((1,1,1) :: (<exp>,<exp>,<exp>) :: <exp> :: <exp>,
       4 :: 1 :: <exp> :: <exp>)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val it = () : unit
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = false : bool
val it = () : unit
- dates_in_months([(1,1,1),(1,2,1),(2,1,2),(1,2,3),(2,3,4)], [4,1,2]);
val it = [(1,1,1),(2,1,2),(1,2,1),(1,2,3)] : (int * int * int) list
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
al test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int *int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:74.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:48.7-50.36 Error: test expression in if is not of type bool [tycon mismatch]
  test expression: string list
  in expression:
    if tl strings then get_nth (nil,n - 1) else get_nth (tl strings,n - 1)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:48.7-50.36 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list
  operand:         'Y list -> 'Y list
  in expression:
    null tl
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- val x = [];
val x = [] : 'a list
- 4 :: x;
val it = [4] : int list
- 5 :: x;
val it = [5] : int list
- val y = 5::x;
val y = [5] : int list
- y
= ;
val it = [5] : int list
- 6::y;
val it = [6,5] : int list
- 6::[];
val it = [6] : int list
- []::y;
stdIn:9.1-9.6 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list * 'Z list list
  operand:         'Z list * int list
  in expression:
    nil :: y
- null::y;
stdIn:1.2-1.9 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z list -> bool) * ('Z list -> bool) list
  operand:         ('Z list -> bool) * int list
  in expression:
    null :: y
- y
= ;
val it = [5] : int list
- tl y;
val it = [] : int list
- hd y;
val it = 5 : int
- hd [];
stdIn:13.1-13.6 Warning: type vars not generalized because of
   value restriction are instantiated to dummy types (X1,X2,...)

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit
- get_nth([],1);

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- get_nth([2],2);
stdIn:1.2-1.16 Error: operator and operand don't agree [overload conflict]
  operator domain: string list * int
  operand:         [int ty] list * [int ty]
  in expression:
    get_nth (2 :: nil,2)
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- get_nth([2],2);
stdIn:1.2-1.9 Error: unbound variable or constructor: get_nth
- use "hw1.sml";
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit
- get_nth([2],2);
stdIn:2.1-2.15 Error: operator and operand don't agree [overload conflict]
  operator domain: string list * int
  operand:         [int ty] list * [int ty]
  in expression:
    get_nth (2 :: nil,2)
- get_nth(["11"],2);

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:50.51-50.58 Error: unclosed string
hw1.sml:51.83-51.86 Error: unclosed string
hw1.sml:51.9 Error: syntax error: inserting  RBRACKET

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:50.51-50.58 Error: unclosed string
hw1.sml:51.83-51.86 Error: unclosed string
hw1.sml:51.9 Error: syntax error: inserting  RBRACKET

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
hw1.sml:53.13-53.19 Error: unbound variable or constructor: months
hw1.sml:53.5-53.66 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * int
  in expression:
    get_nth (<errorvar>,<exp> <exp>) ^ " " ^ (fn {3=<pat>,...} => 3) date
hw1.sml:53.5-53.66 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * int
  in expression:
    get_nth <exp> ^ " " ^ (fn <rule>) date ^ ", " ^
      (fn {1=<pat>,...} => 1) date
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw1.sml:53.26-53.32 Error: unbound variable or constructor: months
hw1.sml:53.5-53.105 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int
  operand:         string list * int -> string
  in expression:
    Int.toString get_nth
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw1.sml:53.5-53.105 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int
  operand:         string list * int -> string
  in expression:
    Int.toString get_nth
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw1.sml:53.5-53.105 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int
  operand:         string list * int -> string
  in expression:
    Int.toString get_nth
val it = () : unit
hw1tests.sml:3.13-3.21 Error: unbound variable or constructor: is_older
hw1tests.sml:5.13-5.28 Error: unbound variable or constructor: number_in_month
hw1tests.sml:7.13-7.29 Error: unbound variable or constructor: number_in_months
hw1tests.sml:9.13-9.27 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:11.13-11.28 Error: unbound variable or constructor: dates_in_months
hw1tests.sml:13.13-13.20 Error: unbound variable or constructor: get_nth
hw1tests.sml:15.17-15.25 Error: unbound variable or constructor: is_older
hw1tests.sml:16.17-16.25 Error: unbound variable or constructor: is_older
hw1tests.sml:17.17-17.25 Error: unbound variable or constructor: is_older
hw1tests.sml:18.17-18.25 Error: unbound variable or constructor: is_older
hw1tests.sml:19.17-19.25 Error: unbound variable or constructor: is_older
hw1tests.sml:20.17-20.25 Error: unbound variable or constructor: is_older
hw1tests.sml:21.17-21.25 Error: unbound variable or constructor: is_older
hw1tests.sml:22.17-22.25 Error: unbound variable or constructor: is_older
hw1tests.sml:23.17-23.25 Error: unbound variable or constructor: is_older
hw1tests.sml:24.18-24.26 Error: unbound variable or constructor: is_older
hw1tests.sml:26.17-26.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:27.17-27.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:28.17-28.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:29.17-29.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:30.17-30.32 Error: unbound variable or constructor: number_in_month
hw1tests.sml:32.17-32.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:33.17-33.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:34.17-34.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:35.17-35.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:36.17-36.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:37.17-37.33 Error: unbound variable or constructor: number_in_months
hw1tests.sml:39.17-39.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:40.17-40.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:41.17-41.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:42.17-42.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:43.17-43.31 Error: unbound variable or constructor: dates_in_month
hw1tests.sml:45.17-45.32 Error: unbound variable or constructor: dates_in_months
hw1tests.sml:46.17-46.32 Error: unbound variable or constructor: dates_in_months
hw1tests.sml:47.17-47.32 Error: unbound variable or constructor: dates_in_months
hw1tests.sml:48.17-48.32 Error: unbound variable or constructor: dates_in_months
hw1tests.sml:49.17-49.32 Error: unbound variable or constructor: dates_in_months
hw1tests.sml:50.17-50.32 Error: unbound variable or constructor: dates_in_months
hw1tests.sml:52.17-52.24 Error: unbound variable or constructor: get_nth
hw1tests.sml:53.17-53.24 Error: unbound variable or constructor: get_nth
hw1tests.sml:54.17-54.24 Error: unbound variable or constructor: get_nth
hw1tests.sml:56.17-56.31 Error: unbound variable or constructor: date_to_string
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw1.sml:53.5-53.105 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int
  operand:         string list * int -> string
  in expression:
    Int.toString get_nth
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val it = () : unit
hw1tests.sml:56.5-56.65 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int * int * int
  operand:         [int ty] list
  in expression:
    date_to_string (2017 :: 1 :: 22 :: nil)
val it = () : unit
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw1.sml:57.6-57.9 Error: unbound variable or constructor: int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = false : bool
val test_f8_2 = false : bool
val test_f8_3 = false : bool
val it = () : unit
- val test_f8_1 = number_before_reaching_sum(1, [1,2,3,4,5,6,7,8,9,10])
= ;
val test_f8_1 = 2 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- val test_f8_1 = number_before_reaching_sum(1, [1,2,3,4,5,6,7,8,9,10]);
stdIn:1.18-1.44 Error: unbound variable or constructor: number_before_reaching_sum
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
-  date_to_string (2013, 6, 1) = "June 1, 2013;
= ;
stdIn:1.33-1.47 Error: unclosed string
- ";
= 
stdIn:1.2-1.4 Error: unclosed string
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
-  date_to_string (2013, 6, 1) = "June 1, 2013";
val it = true : bool
-  number_before_reaching_sum (10, [1,2,3,4,5]);

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
-  number_before_reaching_sum (10, [1,2,3,4,5]);

uncaught exception Empty
  raised at: smlnj/init/pervasive.sml:209.19-209.24
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
-  number_before_reaching_sum (10, [1,2,3,4,5]);
val it = 3 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = false : bool
val test_f8_2 = true : bool
val test_f8_3 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val wath_month = fn : int -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val wath_month = fn : int -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val wath_month = fn : int -> int
val it = () : unit
hw1tests.sml:19.13-19.23 Error: unbound variable or constructor: what_month
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = false : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
- wath_month 70;
stdIn:2.1-2.11 Error: unbound variable or constructor: wath_month
- what_month 70;
val it = 28 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
- what_month 70;
val it = 4 : int
- what_month 31;
val it = 2 : int
- what_month 30;
val it = 2 : int
- what_month 15;
val it = 2 : int
- what_month 32;
val it = 3 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = false : bool
val test9 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = false : bool
val test_f8_2 = false : bool
val test_f8_3 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
- what_month 32;
val it = 2 : int
- number_before_reaching_sum(2, [1,2,3]);
val it = 2 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
- number_before_reaching_sum(2, [1,2,3]);
val it = 1 : int
- what_month 32;
val it = 1 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
hw1tests.sml:69.17-69.27 Error: unbound variable or constructor: wath_month
hw1tests.sml:70.17-70.27 Error: unbound variable or constructor: wath_month
hw1tests.sml:71.17-71.27 Error: unbound variable or constructor: wath_month
hw1tests.sml:72.17-72.27 Error: unbound variable or constructor: wath_month
hw1tests.sml:73.17-73.27 Error: unbound variable or constructor: wath_month
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val test_f9_1 = true : bool
val test_f9_2 = true : bool
val test_f9_3 = true : bool
val test_f9_4 = true : bool
val test_f9_5 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val it = () : unit
- val test10 = month_range (31, 34) = [1,2,2,2];
val test10 = true : bool
- val test10 = month_range (31, 100);
val test10 = [1,2,2,2,2,2,2,2,2,2,2,2,...] : int list
- val test10 = month_range (25, 33);
val test10 = [1,1,1,1,1,1,1,2,2] : int list
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val test_f9_1 = true : bool
val test_f9_2 = true : bool
val test_f9_3 = true : bool
val test_f9_4 = true : bool
val test_f9_5 = true : bool
val test_f10_1 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw1.sml:85.18-85.26 Error: unbound variable or constructor: tl_dates
hw1.sml:87.4-87.38 Error: operator is not a function [tycon mismatch]
  operator: ((int * int * int) list * (int * int * int) -> int * int * int) 
              option
  in expression:
    (SOME get_older) (tl dates,hd dates)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw1.sml:87.4-87.38 Error: operator is not a function [tycon mismatch]
  operator: ((int * int * int) list * (int * int * int) -> int * int * int) 
              option
  in expression:
    (SOME get_older) (tl dates,hd dates)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1.sml";
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val test_f9_1 = true : bool
val test_f9_2 = true : bool
val test_f9_3 = true : bool
val test_f9_4 = true : bool
val test_f9_5 = true : bool
val test_f10_1 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val test_f9_1 = true : bool
val test_f9_2 = true : bool
val test_f9_3 = true : bool
val test_f9_4 = true : bool
val test_f9_5 = true : bool
val test_f10_1 = true : bool
val test_f11_1 = true : bool
val test_f11_2 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw1tests.sml";
[opening hw1tests.sml]
[opening hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test_f1_1 = true : bool
val test_f1_2 = true : bool
val test_f1_3 = true : bool
val test_f1_4 = true : bool
val test_f1_5 = true : bool
val test_f1_6 = true : bool
val test_f1_7 = true : bool
val test_f1_8 = true : bool
val test_f1_9 = true : bool
val test_f1_10 = true : bool
val test_f2_1 = true : bool
val test_f2_2 = true : bool
val test_f2_3 = true : bool
val test_f2_4 = true : bool
val test_f2_5 = true : bool
val test_f3_1 = true : bool
val test_f3_2 = true : bool
val test_f3_3 = true : bool
val test_f3_4 = true : bool
val test_f3_5 = true : bool
val test_f3_6 = true : bool
val test_f4_1 = true : bool
val test_f4_2 = true : bool
val test_f4_3 = true : bool
val test_f4_4 = true : bool
val test_f4_5 = true : bool
val test_f5_1 = true : bool
val test_f5_2 = true : bool
val test_f5_3 = true : bool
val test_f5_4 = true : bool
val test_f5_5 = true : bool
val test_f5_6 = true : bool
val test_f6_1 = true : bool
val test_f6_2 = true : bool
val test_f6_3 = true : bool
val test_f7_1 = true : bool
val test_f7_2 = true : bool
val test_f8_1 = true : bool
val test_f8_2 = true : bool
val test_f8_3 = true : bool
val test_f9_1 = true : bool
val test_f9_2 = true : bool
val test_f9_3 = true : bool
val test_f9_4 = true : bool
val test_f9_5 = true : bool
val test_f10_1 = true : bool
val test_f11_1 = true : bool
val test_f11_2 = true : bool
val it = () : unit
- fun f x =
= case x of
= String => 1
= | Int => 2;
stdIn:3.1-5.11 Error: match redundant
          String => ...
    -->   Int => ...
  fun f x =
= case x of
=  Int => 2;
val f = fn : 'a -> int
- f 3;
val it = 2 : int
- f "s";
val it = 2 : int
- f true;
val it = 2 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:9.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
hw2test.sml:7.13-7.30 Error: unbound variable or constructor: all_except_option
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : unit -> int
val it = () : unit
hw2test.sml:7.5-7.63 Error: operator and operand don't agree [tycon mismatch]
  operator domain: unit
  operand:         string * string list
  in expression:
    all_except_option ("string","string" :: nil)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:9.2-13.86 Error: match redundant
          (nil,false) => ...
          (nil,true) => ...
          (needle :: rest,_) => ...
    -->   (not_needle :: rest,needle_found) => ...
  
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:9.2-14.75 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z list * bool * bool -> string option list option
  this rule: 'Z list * bool * bool -> string option list
  in rule:
    (nil,false,true) => SOME head :: acc
hw2.sml:14.43-14.75 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string list
  operand:         string * string option list
  in expression:
    head :: acc
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:8.11-14.75 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:8.11-14.75 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:8.11-14.64 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:8.11-14.64 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
val test1 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:8.11-14.64 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
val test1 = true : bool
val test_a_1 = true : bool
val test_a_2 = false : bool
val it = () : unit
- all_except_option("a",["a","b","c"])
= ;
val it = SOME ["c","b"] : string list option
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:14.26-14.59 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string list
  operand:         string * string list option
  in expression:
    head :: filter (rest,needle_found)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:21.2-26.66 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z list * bool * bool -> string option
  this rule: 'Z list * bool * bool -> string list option
  in rule:
    (nil,false,true) => SOME (acc :: head :: nil)
hw2.sml:26.26-26.66 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string list * string * bool
  operand:         string list * string list * bool
  in expression:
    filter (rest,acc :: head :: nil,needle_found)
hw2.sml:28.7-28.34 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string list * string * bool
  operand:         string list * 'Z list * bool
  in expression:
    filter (haystack,nil,false)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:20.11-26.64 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option_old = fn : string * string list -> string list option
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:21.11-27.64 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:21.11-27.64 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
val test1 = true : bool
val test_a_1 = true : bool
val test_a_2 = false : bool
val it = () : unit
- all_except_option("a",["a","b","c"])
= ;
val it = SOME ["c","b"] : string list option
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:21.11-27.67 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
- all_except_option("a",["a","b","c"]);
val it = SOME ["b","c"] : string list option
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:21.11-27.67 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit
val test1 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:21.11-27.67 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val it = () : unit

uncaught exception Match [nonexhaustive match failure]
  raised at: hw2.sml:27.67
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:21.11-27.67 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option_old = fn : string * string list -> string list option
val all_except_option = fn : string * string list -> string list option
val it = () : unit
- all_except_option("a",["a","b","c"]);
val it = SOME ["b","c"] : string list option
- all_except_option("a",["b","c"]);
val it = NONE : string list option
- all_except_option("a",[]);
val it = NONE : string list option
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:21.11-27.67 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option_old = fn : string * string list -> string list option
val all_except_option = fn : string * string list -> string list option
val it = () : unit
val test1 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:21.11-27.67 Warning: match nonexhaustive
          (head :: xs,acc,needle_found) => ...
  
val same_string = fn : string * string -> bool
val all_except_option_old = fn : string * string list -> string list option
val all_except_option = fn : string * string list -> string list option
val it = () : unit
val test1 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:20.3-23.69 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): string list list -> 'Z list
  this rule: string list list -> string list option
  in rule:
    :: (x,nil) => all_except_option (s,x)
hw2.sml:23.17-23.69 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list * 'Z list
  operand:         string list option * 'Y
  in expression:
    all_except_option (s,x) @ get_substitutions1 (xs',s)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:20.3-25.25 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): string list list -> 'Z list
  this rule: string list list -> string list option
  in rule:
    :: (x,nil) => all_except_option (s,x)
hw2.sml:23.17-25.25 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list * 'Z list
  operand:         string list option * 'Y list
  in expression:
    all_except_option (s,x) @
      (case (get_substitutions1 (xs',s))
        of NONE => nil
         | SOME y => y)
hw2.sml:19.5-25.25 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  _ list
  result type:  'Z list option
  in declaration:
    get_substitutions1 =
      (fn (substitutions,s) =>
            (case substitutions
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:22.26 Error: syntax error: replacing  COMMA with  EQUALOP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
hw2test.sml:51.9 Error: syntax error: inserting  RBRACKET

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = <hidden-value> : bool
val test_b_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = false : bool
val test_c_3 = false : bool
val test_c_4 = false : bool
val it = () : unit
- get_substitutions2 ([["foo", "fool", "foo2"],["there"], ["foom", "foo","fook","fool"], ["sss","bbb"]], "foo");
val it = ["foom","fook","fool","fool","foo2"] : string list
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
- get_substitutions2 ([["foo", "fool", "foo2"],["there"], ["foom", "foo","fook","fool"], ["sss","bbb"]], "foo");
val it = ["fool","foo2","foom","fook","fool"] : string list
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:40.9 Error: syntax error: replacing  EQUALOP with  DARROW

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
hw2test.sml:61.31 Error: syntax error: inserting  LBRACKET

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = false : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = false : bool
val it = () : unit
- val test_d_1 = similar_names ([["foo", "fool"],["there"]], {first="foo", middle="W", last="Smith"}) =
	    [{first="foo", last="Smith", middle="W"}, {first="fool", last="Smith", middle="W"}]
;
val test_d_1 = false : bool
- val test_d_1 = similar_names ([["foo", "fool"],["there"]], {first="foo", middle="W", last="Smith"})
;
val test_d_1 =
  [{first="fool",last="Smith",middle="W"},
   {first="foo",last="Smith",middle="W"}]
  : {first:string, last:string, middle:string} list
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- val test_d_1 = similar_names ([["foo", "fool"],["there"]], {first="foo", middle="W", last="Smith"})
;
stdIn:1.17-1.30 Error: unbound variable or constructor: similar_names
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:41.16-41.59 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list * {first:'Z, last:'Y, middle:'X}
  operand:         'Z list * {first:'Z, last:'Y, middle:'X} list
  in expression:
    aux (xs',acc :: {first=x,middle=m,last=l} :: nil)
hw2.sml:43.7-43.79 Error: operator and operand don't agree [tycon mismatch]
  operator domain: _ list * {first:_, last:_, middle:_}
  operand:         string list * {first:string, last:_, middle:_} list
  in expression:
    aux
      (get_substitutions2 (substitutions,f),{first=f,middle=m,last=l} :: nil)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
- val test_d_1 = similar_names ([["foo", "fool"],["there"]], {first="foo", middle="W", last="Smith"})
;
val test_d_1 =
  [{first="foo",last="Smith",middle="W"},
   {first="fool",last="Smith",middle="W"}]
  : {first:string, last:string, middle:string} list
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
hw2test.sml:64.38 Error: syntax error: inserting  LBRACKET

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:58.15-58.19 Error: unbound variable or constructor: rank
hw2.sml:58.9-58.13 Error: unbound variable or constructor: suit
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val it = () : unit
hw2test.sml:74.30-74.75 Error: operator and operand don't agree [overload conflict]
  operator domain: (suit * [int ty]) * (suit * [int ty]) list
  operand:         (suit * [int ty]) * (suit * rank) list
  in expression:
    (Diamonds,2) :: (Spades,Ace) :: nil
hw2test.sml:74.107-74.137 Error: operator and operand don't agree [overload conflict]
  operator domain: (suit * [int ty]) * (suit * [int ty]) list
  operand:         (suit * [int ty]) * (suit * rank) list
  in expression:
    (Diamonds,2) :: (Spades,Ace) :: nil
hw2test.sml:75.30-75.75 Error: operator and operand don't agree [overload conflict]
  operator domain: (suit * [int ty]) * (suit * [int ty]) list
  operand:         (suit * [int ty]) * (suit * rank) list
  in expression:
    (Diamonds,2) :: (Spades,Ace) :: nil
hw2test.sml:75.5-75.119 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (suit * rank) list * (suit * rank) list
  operand:         (suit * rank) list * exn
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove) =
      IllegalMove
val it = () : unit
- val test7 = remove_card ([(Hearts, Ace)], (Hearts, Ace), IllegalMove);
val test7 = [] : (suit * rank) list
- remove_card ([(Hearts, Ace), (Diamonds, 2), (Spades, Ace)], (Hearts, Ace), IllegalMove)
= ;
stdIn:3.14-3.59 Error: operator and operand don't agree [overload conflict]
  operator domain: (suit * [int ty]) * (suit * [int ty]) list
  operand:         (suit * [int ty]) * (suit * rank) list
  in expression:
    (Diamonds,2) :: (Spades,Ace) :: nil
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val it = () : unit
hw2test.sml:74.123-74.126 Error: unbound variable or constructor: NUm
hw2test.sml:75.5-75.123 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (suit * rank) list * (suit * rank) list
  operand:         (suit * rank) list * exn
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove) =
      IllegalMove
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val it = () : unit
hw2test.sml:74.123-74.126 Error: unbound variable or constructor: Nnm
hw2test.sml:75.5-75.123 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (suit * rank) list * (suit * rank) list
  operand:         (suit * rank) list * exn
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove) =
      IllegalMove
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val it = () : unit
hw2test.sml:75.5-75.123 Error: operator ad operand don't agree [tycon mismatch]
  operator domain: (suit * rank) list * (suit * rank) list
  operand:         (suit * rank) list * exn
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove) =
      IllegalMove
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val it = () : unit
- val test_2c_2 = remove_card ([(Hearts, Ace), (Diamonds, Num 2), (Spades, Ace)], (Hearts, King), IllegalMove) = IllegalMove;
stdIn:2.5-2.123 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (suit * rank) list * (suit * rank) list
  operand:         (suit * rank) list * exn
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove) =
      IllegalMove
- val test_2c_2 = remove_card ([(Hearts, Ace), (Diamonds, Num 2), (Spades, Ace)], (Hearts, King), IllegalMove);

uncaught exception IllegalMove
  raised at: hw2.sml:73.27
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:88.13 Error: syntax error: inserting  DOT

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : ('a * ''b) list -> bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : ('a * ''b) list -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = false : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (''a * 'b) list -> bool
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (''a * 'b) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (''a * 'b) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:101.32 Error: syntax error: inserting  CASE
hw2.sml:106.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:105.6-105.17 Error: non-constructor applied to argument in pattern: >=
hw2.sml:105.37-105.40 Error: unbound variable or constructor: sum
hw2.sml:104.6-104.17 Error: non-constructor applied to argument in pattern: >=
hw2.sml:104.36-104.39 Error: unbound variable or constructor: sum
hw2.sml:103.6-103.16 Error: non-constructor applied to argument in pattern: >
hw2.sml:103.31-103.34 Error: unbound variable or constructor: sum
hw2.sml:102.6-102.16 Error: non-constructor applied to argument in pattern: >
hw2.sml:102.30-102.33 Error: unbound variable or constructor: sum
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:105.31-105.34 Error: unbound variable or constructor: sum
hw2.sml:104.30-104.33 Error: unbound variable or constructor: sum
hw2.sml:103.25-103.28 Error: unbound variable or constructor: sum
hw2.sml:102.24-102.27 Error: unbound variable or constructor: sum
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (''a * 'b) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (''a * rank) list * int -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (''a * 'b) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (''a * rank) list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2.sml";
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (''a * 'b) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (''a * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:87.42 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (''a * 'b) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (''a * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = false : bool
val test13 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw,Draw,Draw,Draw,Draw],
                        42);
val it = 6 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = true : bool
val test13 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
hw2test.sml:75.120-75.143 Error: constant constructor applied to argument in pattern:IllegalMove
hw2test.sml:75.18-75.151 Error: expression and handler don't agree [tycon mismatch]
  body:          (suit * rank) list
  handler range:          bool
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove)
    handle 
        _ => true
    | exn => raise exn
hw2test.sml:92.29-92.39 Error: operator is not a function [tycon mismatch]
  operator: suit
  in expression:
    Hearts Ace
hw2test.sml:92.43-92.57 Error: operator is not a function [tycon mismatch]
  operator: suit
  in expression:
    Diamonds Num
hw2test.sml:92.61-92.71 Error: operator is not a function [tycon mismatch]
  operator: suit
  in expression:
    Clubs King
hw2test.sml:92.103-92.113 Error: operator is not a function [tycon mismatch]
  operator: suit
  in expression:
    Hearts Ace
hw2test.sml:92.125-92.135 Error: operator is not a function [tycon mismatch]
  operator: suit
  in expression:
    Clubs King
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
hw2test.sml:75.120-75.143 Error: constant constructor applied to argument in pattern:IllegalMove
hw2test.sml:75.18-75.151 Error: expression and handler don't agree [tycon mismatch]
  body:          (suit * rank) list
  handler range:          bool
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove)
    handle 
        _ => true
    | exn => raise exn
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
hw2test.sml:75.18-75.139 Error: expression and handler don't agree [tycon mismatch]
  body:          (suit * rank) list
  handler range:          bool
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove)
    handle 
        IllegalMove => true
    | exn => raise exn
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
hw2test.sml:75.84 Error: syntax error: inserting  LPAREN

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
hw2test.sml:75.18-75.139 Error: expression and handler don't agree [tycon mismatch]
  body:          (suit * rank) list
  handler range:          bool
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove)
    handle 
        IllegalMove => true
    | exn => raise exn
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
hw2test.sml:75.18-75.137 Error: expression and handler don't agree [tycon mismatch]
  body:          (suit * rank) list
  handler range:          bool
  in expression:
    remove_card ((<exp>,<exp>) :: <exp> :: <exp>,(Hearts,King),IllegalMove)
    handle 
        IllegalMove => true
    | exn => raise exn
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = true : bool
val test13 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2d_4 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val test_2g_1 = true : bool
val test_2g_2 = false : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = true : bool
val test13 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2d_4 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val test_2g_1 = true : bool
val test_2g_2 = false : bool
val it = () : unit
- officiate([(Hearts, Ace), (Diamonds, Num 2), (Clubs, King)], [Draw, Discard (Hearts, Ace), Draw], 2);
val it = 13 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = true : bool
val test13 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2d_4 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val test_2g_1 = true : bool
val test_2g_2 = false : bool
val it = () : unit
- officiate([(Hearts, Ace), (Diamonds, Num 2), (Clubs, King)], [Draw, Discard (Hearts, Ace), Draw], 2);
val it = 13 : int
- officiate([(Hearts, Ace), (Diamonds, Num 2), (Clubs, King)], [Draw, Draw, Discard (Diamonds, Num 2), Draw], 22);
val it = 1 : int
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = true : bool
val test13 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2d_4 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val test_2g_1 = true : bool
val test_2g_2 = true : bool
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = true : bool
val test13 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2d_4 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val test_2g_1 = true : bool
val test_2g_2 = true : bool
val it = () : unit

- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw2test.sml";
[opening hw2test.sml]
[opening hw2.sml]
hw2.sml:87.38 Warning: calling polyEqual
hw2.sml:76.32 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card_ = fn : ''a list * ''a * exn -> ''a list
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = true : bool
val test13 = true : bool
val test_a_1 = true : bool
val test_a_2 = true : bool
val test_a_3 = true : bool
val test_a_4 = true : bool
val test_a_5 = true : bool
val test_a_6 = true : bool
val test_b_1 = true : bool
val test_b_2 = true : bool
val test_b_3 = true : bool
val test_b_4 = true : bool
val test_c_1 = true : bool
val test_c_2 = true : bool
val test_c_3 = true : bool
val test_c_4 = true : bool
val test_d_1 = true : bool
val test_d_2 = true : bool
val test_d_3 = true : bool
val test_2a_1 = true : bool
val test_2a_2 = true : bool
val test_2a_3 = true : bool
val test_2b_1 = true : bool
val test_2b_2 = true : bool
val test_2b_3 = true : bool
val test_2c_1 = true : bool
val test_2d_1 = true : bool
val test_2d_2 = true : bool
val test_2d_3 = true : bool
val test_2d_4 = true : bool
val test_2e_1 = true : bool
val test_2e_2 = true : bool
val test_2e_3 = true : bool
val test_2f_1 = true : bool
val test_2f_2 = true : bool
val test_2f_3 = true : bool
val test_2f_4 = true : bool
val test_2g_1 = true : bool
val test_2g_2 = true : bool
val it = () : unit
- 